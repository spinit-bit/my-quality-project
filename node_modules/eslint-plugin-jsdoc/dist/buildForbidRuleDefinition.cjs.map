{"version":3,"file":"buildForbidRuleDefinition.cjs","names":["_iterateJsdoc","_interopRequireDefault","require","e","__esModule","default","buildForbidRuleDefinition","contextName","contexts","description","url","iterateJsdoc","info","comment","report","utils","contextStr","foundContext","findContext","message","context","contextSelected","meta","docs","schema","type","modifyContext","propertyDescriptors","Object","getOwnPropertyDescriptors","create","getPrototypeOf","options","value","nonGlobalSettings","exports"],"sources":["../src/buildForbidRuleDefinition.js"],"sourcesContent":["import iterateJsdoc from './iterateJsdoc.js';\n\n/**\n * @param {{\n *   contexts: (string|{\n *     comment: string,\n *     context: string,\n *     message: string\n *   })[],\n *   description?: string,\n *   contextName?: string\n *   url?: string,\n * }} cfg\n * @returns {import('@eslint/core').RuleDefinition<\n *   import('@eslint/core').RuleDefinitionTypeOptions\n * >}\n */\nexport const buildForbidRuleDefinition = ({\n  contextName,\n  contexts,\n  description,\n  url,\n}) => {\n  return iterateJsdoc(({\n    // context,\n    info: {\n      comment,\n    },\n    report,\n    utils,\n  }) => {\n    const {\n      contextStr,\n      foundContext,\n    } = utils.findContext(contexts, comment);\n\n    // We are not on the *particular* matching context/comment, so don't assume\n    //   we need reporting\n    if (!foundContext) {\n      return;\n    }\n\n    const message = /** @type {import('./iterateJsdoc.js').ContextObject} */ (\n      foundContext\n    )?.message ??\n      'Syntax is restricted: {{context}}' +\n        (comment ? ' with {{comment}}' : '');\n\n    report(message, null, null, comment ? {\n      comment,\n      context: contextStr,\n    } : {\n      context: contextStr,\n    });\n  }, {\n    contextSelected: true,\n    meta: {\n      docs: {\n        description: description ?? contextName ?? 'Reports when certain comment structures are present.',\n        url: url ?? 'https://github.com/gajus/eslint-plugin-jsdoc/blob/main/docs/advanced.md#user-content-advanced-creating-your-own-rules',\n      },\n      schema: [],\n      type: 'suggestion',\n    },\n    modifyContext: (context) => {\n      // Reproduce context object with our own `contexts`\n      const propertyDescriptors = Object.getOwnPropertyDescriptors(context);\n      return Object.create(\n        Object.getPrototypeOf(context),\n        {\n          ...propertyDescriptors,\n          options: {\n            ...propertyDescriptors.options,\n            value: [\n              {\n                contexts,\n              },\n            ],\n          },\n        },\n      );\n    },\n    nonGlobalSettings: true,\n  });\n};\n"],"mappings":";;;;;;AAAA,IAAAA,aAAA,GAAAC,sBAAA,CAAAC,OAAA;AAA6C,SAAAD,uBAAAE,CAAA,WAAAA,CAAA,IAAAA,CAAA,CAAAC,UAAA,GAAAD,CAAA,KAAAE,OAAA,EAAAF,CAAA;AAE7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,MAAMG,yBAAyB,GAAGA,CAAC;EACxCC,WAAW;EACXC,QAAQ;EACRC,WAAW;EACXC;AACF,CAAC,KAAK;EACJ,OAAO,IAAAC,qBAAY,EAAC,CAAC;IACnB;IACAC,IAAI,EAAE;MACJC;IACF,CAAC;IACDC,MAAM;IACNC;EACF,CAAC,KAAK;IACJ,MAAM;MACJC,UAAU;MACVC;IACF,CAAC,GAAGF,KAAK,CAACG,WAAW,CAACV,QAAQ,EAAEK,OAAO,CAAC;;IAExC;IACA;IACA,IAAI,CAACI,YAAY,EAAE;MACjB;IACF;IAEA,MAAME,OAAO,GAAG,wDACdF,YAAY,EACXE,OAAO,IACR,mCAAmC,IAChCN,OAAO,GAAG,mBAAmB,GAAG,EAAE,CAAC;IAExCC,MAAM,CAACK,OAAO,EAAE,IAAI,EAAE,IAAI,EAAEN,OAAO,GAAG;MACpCA,OAAO;MACPO,OAAO,EAAEJ;IACX,CAAC,GAAG;MACFI,OAAO,EAAEJ;IACX,CAAC,CAAC;EACJ,CAAC,EAAE;IACDK,eAAe,EAAE,IAAI;IACrBC,IAAI,EAAE;MACJC,IAAI,EAAE;QACJd,WAAW,EAAEA,WAAW,IAAIF,WAAW,IAAI,sDAAsD;QACjGG,GAAG,EAAEA,GAAG,IAAI;MACd,CAAC;MACDc,MAAM,EAAE,EAAE;MACVC,IAAI,EAAE;IACR,CAAC;IACDC,aAAa,EAAGN,OAAO,IAAK;MAC1B;MACA,MAAMO,mBAAmB,GAAGC,MAAM,CAACC,yBAAyB,CAACT,OAAO,CAAC;MACrE,OAAOQ,MAAM,CAACE,MAAM,CAClBF,MAAM,CAACG,cAAc,CAACX,OAAO,CAAC,EAC9B;QACE,GAAGO,mBAAmB;QACtBK,OAAO,EAAE;UACP,GAAGL,mBAAmB,CAACK,OAAO;UAC9BC,KAAK,EAAE,CACL;YACEzB;UACF,CAAC;QAEL;MACF,CACF,CAAC;IACH,CAAC;IACD0B,iBAAiB,EAAE;EACrB,CAAC,CAAC;AACJ,CAAC;AAACC,OAAA,CAAA7B,yBAAA,GAAAA,yBAAA","ignoreList":[]}